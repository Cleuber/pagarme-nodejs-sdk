/**
 * PagarmeApiSDKLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  dict,
  lazy,
  literal,
  nullable,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { getAntifraudResponseSchema } from './getAntifraudResponse';
import {
  GetBillingAddressResponse,
  getBillingAddressResponseSchema,
} from './getBillingAddressResponse';
import { getFineResponseSchema } from './getFineResponse';
import { getGatewayResponseResponseSchema } from './getGatewayResponseResponse';
import { getInterestResponseSchema } from './getInterestResponse';
import { getSplitResponseSchema } from './getSplitResponse';
import { GetTransactionResponse } from './getTransactionResponse';

/** Response object for getting a boleto transaction */
export interface GetBoletoTransactionResponse extends GetTransactionResponse {
  url: string | null;
  barcode: string | null;
  nossoNumero: string | null;
  bank: string | null;
  documentNumber: string | null;
  instructions: string | null;
  billingAddress: GetBillingAddressResponse | null;
  dueAt?: string | null;
  qrCode: string | null;
  line: string | null;
  pdfPassword: string | null;
  pdf: string | null;
  paidAt?: string | null;
  paidAmount: string | null;
  type: string | null;
  creditAt?: string | null;
  /** Soft Descriptor */
  statementDescriptor: string | null;
}

export const getBoletoTransactionResponseSchema: Schema<any> = object({
  url: ['url', nullable(string())],
  barcode: ['barcode', nullable(string())],
  nossoNumero: ['nosso_numero', nullable(string())],
  bank: ['bank', nullable(string())],
  documentNumber: ['document_number', nullable(string())],
  instructions: ['instructions', nullable(string())],
  billingAddress: [
    'billing_address',
    nullable(lazy(() => getBillingAddressResponseSchema)),
  ],
  dueAt: ['due_at', optional(nullable(string()))],
  qrCode: ['qr_code', nullable(string())],
  line: ['line', nullable(string())],
  pdfPassword: ['pdf_password', nullable(string())],
  pdf: ['pdf', nullable(string())],
  paidAt: ['paid_at', optional(nullable(string()))],
  paidAmount: ['paid_amount', nullable(string())],
  type: ['type', nullable(string())],
  creditAt: ['credit_at', optional(nullable(string()))],
  statementDescriptor: ['statement_descriptor', nullable(string())],
  gatewayId: ['gateway_id', nullable(string())],
  amount: ['amount', nullable(number())],
  status: ['status', nullable(string())],
  success: ['success', nullable(boolean())],
  createdAt: ['created_at', nullable(string())],
  updatedAt: ['updated_at', nullable(string())],
  attemptCount: ['attempt_count', nullable(number())],
  maxAttempts: ['max_attempts', nullable(number())],
  splits: ['splits', nullable(array(lazy(() => getSplitResponseSchema)))],
  nextAttempt: ['next_attempt', optional(nullable(string()))],
  id: ['id', nullable(string())],
  gatewayResponse: [
    'gateway_response',
    nullable(lazy(() => getGatewayResponseResponseSchema)),
  ],
  antifraudResponse: [
    'antifraud_response',
    nullable(lazy(() => getAntifraudResponseSchema)),
  ],
  metadata: ['metadata', optional(nullable(dict(string())))],
  split: ['split', nullable(array(lazy(() => getSplitResponseSchema)))],
  interest: [
    'interest',
    optional(nullable(lazy(() => getInterestResponseSchema))),
  ],
  fine: ['fine', optional(nullable(lazy(() => getFineResponseSchema)))],
  maxDaysToPayPastDue: [
    'max_days_to_pay_past_due',
    optional(nullable(number())),
  ],
  transactionType: ['transaction_type', optional(literal('boleto'))],
});
